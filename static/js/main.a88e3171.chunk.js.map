{"version":3,"sources":["constants.js","functions.js","LocationBox.js","WeatherBox.js","App.js","serviceWorker.js","index.js"],"names":["api","days","months","calcHour","offset","date","Date","utc","getTime","getTimezoneOffset","getHours","LocationBox","props","weather","className","name","sys","country","currentDay","getDay","currentMonth","getMonth","currentDate","getDate","dateFormater","myDateBuilder","toLocaleTimeString","hour","minute","hour12","calcTime","timezone","Math","round","main","temp","isFirstTime","App","state","city","timeOfDay","temperature","this","type","placeholder","onChange","event","setState","target","value","onKeyPress","e","which","fetch","then","response","json","result","Fragment","WeatherBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a88e3171.chunk.js","sourcesContent":["export const api = {\n  key: \"643bbfb06345ab7789fa491e585154d5\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nexport const days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n","import { days, months } from \"./constants\";\n\nexport const dateFormater = (currentDate) => {\n  switch (currentDate) {\n    case 1:\n      return `${currentDate}st`;\n    case 2:\n      return `${currentDate}nd`;\n    case 3:\n      return `${currentDate}rd`;\n    default:\n      return `${currentDate}th`;\n  }\n};\nexport const timeFormater = (min) => {\n  return min > 10 ? min : \"0\" + min;\n};\n\nexport const myDateBuilder = (date) => {\n  let currentDay = days[date.getDay()];\n  let currentMonth = months[date.getMonth()];\n  let currentDate = date.getDate();\n  return `${currentDay} , ${dateFormater(currentDate)} ${currentMonth}`;\n};\nexport const calcTime = (offset) => {\n  offset = offset / 3600;\n  var date = new Date();\n  var utc = date.getTime() + date.getTimezoneOffset() * 60000;\n  var newDate = new Date(utc + 3600000 * offset);\n  return newDate.toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false,\n  });\n};\nexport const calcHour = (offset) => {\n  offset = offset / 3600;\n  var date = new Date();\n  var utc = date.getTime() + date.getTimezoneOffset() * 60000;\n  var newDate = new Date(utc + 3600000 * offset);\n  return newDate.getHours();\n};\nexport const bgGen = (timeOfDay, temperature) => {\n  if (temperature > 16 && (timeOfDay > 19 || timeOfDay < 6))\n    return \"app warm night\";\n  if (temperature <= 16 && (timeOfDay > 19 || timeOfDay < 6))\n    return \"app cold night\";\n  if (temperature <= 16 && (timeOfDay < 19 || timeOfDay > 6))\n    return \"app cold day\";\n\n  return \"app warm day\";\n};\n","import React from \"react\";\nimport { myDateBuilder, calcTime } from \"./functions\";\n\nconst LocationBox = (props) => {\n  const { weather } = props;\n  return (\n    <div className=\"location-box\">\n      <div className=\"location\">\n        <p>\n          {weather.name}, {weather.sys.country}\n        </p>\n      </div>\n      <div className=\"date\">{myDateBuilder(new Date())}</div>\n      <div className=\"time\">\n        <p>{calcTime(weather.timezone)}</p>\n      </div>\n    </div>\n  );\n};\nexport default LocationBox;\n","import React from \"react\";\n\nconst LocationBox = (props) => {\n  const { weather } = props;\n  return (\n    <div className=\"weather-box\">\n      <div className=\"temp\">\n        <p>{Math.round(weather.main.temp)}Â°C</p>\n      </div>\n      <div className=\"weather\">\n        <p>\n          {typeof weather.weather === \"undefined\"\n            ? \"Sunny\"\n            : weather.weather[0].main}\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default LocationBox;\n","import React, { Component } from \"react\";\nimport Locationbox from \"./LocationBox\";\nimport WeatherBox from \"./WeatherBox\";\nimport { api } from \"./constants\";\nimport { bgGen, calcHour } from \"./functions\";\nvar isFirstTime = true; // Declare a variable to determine whether it is first time that we open the App or not\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weather: {\n        sys: {\n          //Default values to prevent errors\n          country: \" \",\n        },\n      },\n      city: \" \",\n    };\n  }\n\n  render() {\n    const { weather, city } = this.state; //Destructuring to reduce code lenght\n    const search = (e) => {\n      var key = e.which;\n      if (key === 13) {\n        // Check if the key is \"Enter\"\n        fetch(`${api.base}weather?q=${city}&units=metric&appid=${api.key}`) // Fetch Dta from API\n          .then((response) => response.json())\n          .then((result) => {\n            this.setState({ weather: result });\n            isFirstTime = false; // We have set the result to state so It is not the first time anymore\n          });\n      }\n    };\n    return (\n      <div\n        className={\n          // Background of App is base on Class names so we generae it via bgGen function\n          isFirstTime || typeof weather.sys === \"undefined\" // Check if it is first time or Entry of ciry is wrong\n            ? \"app warm day\" // Default background for App to prevent showing white background\n            : bgGen(\n                calcHour(weather.timezone), // Calculate just hour\n                isFirstTime || typeof weather.sys === \"undefined\"\n                  ? 15\n                  : Math.round(weather.main.temp) // Send temperature of the city\n              )\n        }\n      >\n        <main>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Search...\"\n              onChange={(event) => {\n                this.setState({ city: event.target.value }); // Set the city with input of search field\n              }}\n              onKeyPress={search}\n            ></input>\n          </div>\n          {typeof weather.sys === \"undefined\" && !isFirstTime ? (\n            <div className=\"location-box\">\n              <div className=\"location\">\n                <p> City Not Found! </p>\n              </div>\n            </div> //CHeck if the input is Valid or not and be sure not to display the error in first use\n          ) : (\n            \" \"\n          )}\n          {typeof weather.sys !== \"undefined\" && !isFirstTime ? ( // If this is the forst time or the input is invalid don't display anything below search field\n            <React.Fragment>\n              <Locationbox weather={weather} />\n              <WeatherBox weather={weather} />\n            </React.Fragment>\n          ) : isFirstTime ? (\n            <div className=\"location-box\">\n              <div className=\"location\">\n                <p> Try searching a City! </p>\n              </div>\n            </div> // Display a defult text for the first use\n          ) : (\n            \" \"\n          )}\n        </main>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}